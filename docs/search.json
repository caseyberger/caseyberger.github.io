[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Casey E Berger",
    "section": "",
    "text": "Assistant Professor\nPhysics and Statistical and Data Sciences\nSmith College"
  },
  {
    "objectID": "index.html#interdisciplinary-science",
    "href": "index.html#interdisciplinary-science",
    "title": "Casey E Berger",
    "section": "Interdisciplinary Science",
    "text": "Interdisciplinary Science\nLife is more interesting on the boundaries!"
  },
  {
    "objectID": "cv_and_pubs.html",
    "href": "cv_and_pubs.html",
    "title": "CV and Publications",
    "section": "",
    "text": "CV\nMy up-to-date academic CV as of August 2023 can be found here\n\n\nAcademic Publications"
  },
  {
    "objectID": "inclusive_classroom.html",
    "href": "inclusive_classroom.html",
    "title": "Building an Inclusive Classroom",
    "section": "",
    "text": "How can you be sure students of all backgrounds feel comfortable in your class?"
  },
  {
    "objectID": "teaching_philosophy.html",
    "href": "teaching_philosophy.html",
    "title": "Teaching Philosophy",
    "section": "",
    "text": "Traditional lecture-heavy lesson planning is not the most effective way to facilitate student learning. My teaching philosophy incorporates research-backed methods to help students build efficacy and cultivate a set of tools they can use beyond my classroom.\nUsing research-backed methods in the classroom takes time and effort. It’s challenging, and there are lots of barriers to implementation. But it’s worth it.\n\n\nLearning is an active process. If I stand in front of the classroom and deliver a perfect lecture, the best case is that students will absorb the information I’ve provided and be able to regurgitate it later on an exam. But this style of teaching gives the students no opportunities to practice applying that information. Active learning improves retention of knowledge, and it facilitates the acquisition of a deeper understanding: not just a memorization of facts, but an ability to apply the knowledge in more complex ways.\nActive learning is effective not only at the introductory level, but also in advanced graduate coursework.\n\n\n\nStudents benefit greatly from working with their peers. Those who may need a little extra support are able to watch their peers model their thinking process and are likely to share the same questions, which reinforces a growth mindset. Students who are already on top of the material benefit as well, as walking a peer through how they arrived at the answer strengthens their own understanding of the concept and can help reveal nuance. Groups should be kept small enough that all students are able to contribute, but large enough to balance out possible power dynamics. The most successful groups have been shown to be around 3-5 students.\nBut the community is not just between students and their peers: it includes the instructor as well. My practice is to trust my students and to work with them on an individual level. We are all still learning how to learn (even those of us who have been doing this a long time), and taking ownership of your own education is far more valuable than performing well in a classroom with rigid expectations. The trust between student and instructor takes time to develop, but it’s essential to supporting students in a way that prepares them for the world outside the classroom.\n\n\n\nShort-term memory is extremely limited. The human brain is built to process information, but it can only handle so much at one time. Every embellishment – from complicated visuals to interesting side stories – steals attention away from the concepts being presented and minimizing the ability of students to absorb the information.\n\n\n\nJargon is a useful shorthand. But in order for the shorthand to be effective, the people using the jargon need to understand the underlying concepts.\nJargon is for experts, not learners. Introducing shorthand words – even if they are standard in the field – only obfuscates the concepts.\n\n\n\nIf students feel unsafe or like they don’t belong, their ability to learn and grow will be limited.\nThere are many things you can do to make your classroom safer and more inclusive."
  },
  {
    "objectID": "teaching_philosophy.html#active-learning",
    "href": "teaching_philosophy.html#active-learning",
    "title": "Teaching Philosophy",
    "section": "",
    "text": "Learning is an active process. If I stand in front of the classroom and deliver a perfect lecture, the best case is that students will absorb the information I’ve provided and be able to regurgitate it later on an exam. But this style of teaching gives the students no opportunities to practice applying that information. Active learning improves retention of knowledge, and it facilitates the acquisition of a deeper understanding: not just a memorization of facts, but an ability to apply the knowledge in more complex ways.\nActive learning is effective not only at the introductory level, but also in advanced graduate coursework."
  },
  {
    "objectID": "teaching_philosophy.html#building-community",
    "href": "teaching_philosophy.html#building-community",
    "title": "Teaching Philosophy",
    "section": "",
    "text": "Students benefit greatly from working with their peers. Those who may need a little extra support are able to watch their peers model their thinking process and are likely to share the same questions, which reinforces a growth mindset. Students who are already on top of the material benefit as well, as walking a peer through how they arrived at the answer strengthens their own understanding of the concept and can help reveal nuance. Groups should be kept small enough that all students are able to contribute, but large enough to balance out possible power dynamics. The most successful groups have been shown to be around 3-5 students.\nBut the community is not just between students and their peers: it includes the instructor as well. My practice is to trust my students and to work with them on an individual level. We are all still learning how to learn (even those of us who have been doing this a long time), and taking ownership of your own education is far more valuable than performing well in a classroom with rigid expectations. The trust between student and instructor takes time to develop, but it’s essential to supporting students in a way that prepares them for the world outside the classroom."
  },
  {
    "objectID": "teaching_philosophy.html#reducing-distractions",
    "href": "teaching_philosophy.html#reducing-distractions",
    "title": "Teaching Philosophy",
    "section": "",
    "text": "Short-term memory is extremely limited. The human brain is built to process information, but it can only handle so much at one time. Every embellishment – from complicated visuals to interesting side stories – steals attention away from the concepts being presented and minimizing the ability of students to absorb the information."
  },
  {
    "objectID": "teaching_philosophy.html#concepts-first-jargon-later",
    "href": "teaching_philosophy.html#concepts-first-jargon-later",
    "title": "Teaching Philosophy",
    "section": "",
    "text": "Jargon is a useful shorthand. But in order for the shorthand to be effective, the people using the jargon need to understand the underlying concepts.\nJargon is for experts, not learners. Introducing shorthand words – even if they are standard in the field – only obfuscates the concepts."
  },
  {
    "objectID": "teaching_philosophy.html#safe-and-inclusive-classrooms",
    "href": "teaching_philosophy.html#safe-and-inclusive-classrooms",
    "title": "Teaching Philosophy",
    "section": "",
    "text": "If students feel unsafe or like they don’t belong, their ability to learn and grow will be limited.\nThere are many things you can do to make your classroom safer and more inclusive."
  },
  {
    "objectID": "bio.html",
    "href": "bio.html",
    "title": "About Me",
    "section": "",
    "text": "Academic Bio\nI am an assistant professor of physics and statistical and data sciences at Smith College. Previously, I was a postdoctoral research associate at Boston University in the physics department and the Hariri Institute for Computing. I earned my PhD from the University of North Carolina at Chapel Hill, where I was a Department of Energy Computational Science Graduate Fellow and a William Neal Reynolds fellow in the Royster Society of Fellows. My research is in computational and data science methods in many-body quantum mechanics.\n\nI also work on issues of diversity and equity in STEM, with an emphasis on improving representation and support of women, LGBTQ folks, BIPOC, and other underrepresented groups in STEM. When I’m not working in STEM and STEM-related pursuits, you can find me running, cooking, practicing photography, or writing."
  },
  {
    "objectID": "python_data_science.html",
    "href": "python_data_science.html",
    "title": "Teaching Data Science to Physics Students",
    "section": "",
    "text": "So you want to teach your physics students some data science?\nFortunately, there are lots of resources to help you do just this! I’ve put together a handy guide that should help walk you through this process, whether you’re just hearing the words “Python programming language” for the first time or a seasoned pro.\nIf you are completely new to Python, you should start with The Basics of Python, where I walk through a basic Python bootcamp and provide links to other resources for practice.\n\nGetting StartedReady to Dive InDig Deeper\n\n\nIn this section are a number of resources to help walk you through some of the most widely-used (and accessible) tools for programming in the classroom. There, you can learn some basic Python, get comfortable with a free and easy to use (no downloads or installs required!) coding environment, and get some best practices tips for teaching students who are also just getting started.\nIf you don’t already have Python installed on your machine, or if you don’t already have access to a cloud-based programming environment (like JupyterHub or Posit), this notebook will walk you through Google Colab, which is an excellent, free option if you want to program with Python and don’t want to have to install a bunch of programs on your computer. All you need to start this process is a Google account.\nThis tutorial will walk you through the basics of Colab. Click on this link, and it should take you to a page that looks like this:\n\n\nIn this section, you can find modules developed by graduate and postdoctoral fellows in the Data Science Education Community of Practice (DSECOP), part of the American Physical Society’s topical Group on Data Science. These modules are designed to fit into physics courses and can be adapted for students at varying levels of coding ability\n\n\nIn this section, you will find more modules by the DSECOP fellows, which are intended for more advanced students. Once students have gained some familiarity with data science tools and processes (using the earlier modules, for example), they will be ready for these modules."
  },
  {
    "objectID": "python_data_science.html#python-basics",
    "href": "python_data_science.html#python-basics",
    "title": "Teaching Python and Data Science to Physics Students",
    "section": "Python basics",
    "text": "Python basics"
  },
  {
    "objectID": "python_data_science.html#using-google-colab",
    "href": "python_data_science.html#using-google-colab",
    "title": "Teaching Python and Data Science to Physics Students",
    "section": "Using Google colab",
    "text": "Using Google colab\nIf you don’t already have Python installed on your machine, or if you don’t already have access to a cloud-based programming environment (like JupyterHub or Posit), this notebook will walk you through Google Colab, which is an excellent, free option if you want to program with Python and don’t want to have to install a bunch of programs on your computer. All you need to start this process is a Google account.\nThis tutorial will walk you through the basics of Colab. Click on this link, and it should take you to a page that looks like this:"
  },
  {
    "objectID": "beginning_python.html",
    "href": "beginning_python.html",
    "title": "Beginning Python",
    "section": "",
    "text": "If you’re brand new to Python, this page will walk you through everything from installation to basic Python syntax. You can also find a list of Additional References for more detail and opportunities to practice.\n\nShould I install Python or use a cloud-based environment?\nThis depends on your own needs. If you want to be able to work offline, then you’ll want to install Python on your local machine. But if you can reliably expect access to the internet, then an online service will be a lot quicker to start with and will prevent the need to manage updates, install special packages, or deal with software incompatibilities.\nIn both cases, I recommend working with Jupyter notebooks to begin. A Jupyter notebook allows you to run code in small chunks as well as leave clear notes and documentation throughout. If you have worked with Posit or RStudio, you will already be familiar with how this works. If you haven’t, don’t worry! We will walk through it below.\n\nInstalling Python and JupyterLabAccessing Google Colab\n\n\n\n\n\n\n\n\n\n\n\nUsing a Notebook (Jupyter or Colab)\n\n\nAdditional References\nPython’s guide to Python for Beginners"
  },
  {
    "objectID": "beginning_python.html#should-i-install-python-or-use-a-cloud-based-environment",
    "href": "beginning_python.html#should-i-install-python-or-use-a-cloud-based-environment",
    "title": "Beginning Python",
    "section": "Should I install Python or use a cloud-based environment?",
    "text": "Should I install Python or use a cloud-based environment?\nThis depends on your own needs. If you want to be able to work offline, then you’ll want to install Python on your local machine. But if you can reliably expect access to the internet, then an online service will be a lot quicker to start with and will prevent the need to manage updates, install special packages, or deal with software incompatibilities.\nIn both cases, I recommend working with Jupyter notebooks to begin. A Jupyter notebook allows you to run code in small chunks as well as leave clear notes and documentation throughout. If you have worked with Posit or RStudio, you will already be familiar with how this works. If you haven’t, don’t worry! We will walk through it below.\n\nInstalling Python and JupyterLabAccessing Google Colab"
  },
  {
    "objectID": "beginning_python.html#additional-references",
    "href": "beginning_python.html#additional-references",
    "title": "Beginning Python",
    "section": "Additional References",
    "text": "Additional References\nPython’s guide to Python for Beginners"
  },
  {
    "objectID": "SDS271/F23/Lab1_clean.html",
    "href": "SDS271/F23/Lab1_clean.html",
    "title": "Lab 1: Getting Started",
    "section": "",
    "text": "This introductory lab will serve as a refresher on the Python skills you learned in previous classes, as well as a chance to get to know the course structure and content.\n\n\nFor the first half of the semester, we will focus on skill building through in-class labs. You may or may not be able to complete the lab during class time, it is your responsibility to complete the lab and respond to the self-reflection poll (linked at the end of each lab). These will constitute your “weekly homework” and must be turned in by the due date (usually the Wednesday of the following week).\nIn these labs, you will see information and instructions given in a few ways.\nOrdinary markdown: These traditional black-text-white-background sections are useful instructions, background, etc. You should read them to get context for what you will be doing.\n\nThese sections give you specific tips on how to do something that may be new or tricky.\nLook here first if you are stuck!\n\n\nThese sections give you instructions for what you are supposed to do in order to complete the lab. Consider these the “problem statements” to which you are expected to produce a solution.\n\nIf at any point you are confused about what you are supposed to do, please ask!\n\n\n\n\n\nIf you’re reading this notebook in JupyterHub, then great! You’ve done it! If you’re reading this on the course website, then do the following:\nIn your browser, navigate to jupyterhub.smith.edu\nYou should see a page that looks like this:\n\nEveryone who was already registered for the class or who sent Casey an email before yesterday at 5PM stating their intention to add the class have been added to the list of people who have access to this server. You should be able to log in using your Smith credentials.\nusername: your Smith email address, without the @smith.edu password: the password you use to access your Smith email\nIf you have not registered for the class or emailed Casey before yesterday at 5PM, then you are not on that list. Please speak to Casey and she will ask CATS add you, but it may take a day or two before you get access.\n\nIf you are struggling to connect, please speak to Casey or submit a bug report here\n\n\nOnce you are able to open the Lab 1 notebook (.ipynb extension) in JupyterHub, please check in on  slido. You may proceed once you have done this.\n\n\n\n\nOnce you have access to JupyterHub, let’s get comfortable with using it. Similar to R Markdown (Quarto) that you used in SDS 100, JupyterHub allows you to write code in special code cells and annotate the code in markdown cells.\n\nTo create a new cell, press the “+” button in the menu along the top of the notebook.\nOnce you have a new cell, click on that cell to select it.\nYou can now choose “Code” or “Markdown” from the dropdown menu above.\nTo evaluate a code cell, use shift+enter.\n\n\nExercise 1:\n\n\nPerform a simple calculation with Python (it can be as easy as 1 + 1) in a cell.\n\n\nLeave a sentence or two in a markdown cell about what you did.\n\n\nThen enjoy some wholesome support from Coach Lasso in the form of a gif.\n\n\n\n\n\nSometimes, mistakes happen. Sometimes you write a while loop that has no termination condition and will run until the end of time if you let it. Sometimes you just realize after you ran a cell that you typed the wrong thing. Either way, you can always stop Jupyter in the middle of its processes.\n\nIn the menu at the top of the page, select Kernel &gt; Interrupt to stop the Kernel.\nOnce you’re ready to run the code again, you can re-run.\nYou can also restart the whole kernel and run the notebook from the start (this is often a good first debugging method if you’re not sure why something isn’t working). Kernel &gt; Restart Kernel and Run All Cells\n\nNow, let’s try to see how this works. Here’s a line of code:\nx = 0\nwhile x &lt; 10:\n    print(\"hello world!\")\nWhy do you expect this will be a problem if you try to run it? If you don’t know, talk to a neighbor.\n\nExercise 2:\nOnce you understand the problem, copy the code above into a new code cell and start running it.\nWhen it loops forever, you’ll want to interrupt it using Kernel &gt; Interrupt.\nThen fix the code and rerun it so it only prints “hello world” 10 times.\n\n\nAnother useful tip: click on the tab on the far left of the browser that looks like a square inside of a circle. That tab will show you what tabs you have open and what kernels are running. It’s good practice to shut down any kernels you are not actively using. If you don’t do this, you will overload the server and have a hard time running your notebooks. Periodically check this tab and clean up your processes.\n\n\n\n\n\nOne of the expectations of this class is that you have previous experience with Python. This is one of the reasons CSC 110 is a course prerequisite. It may have been a while since you’ve used Python, so let’s just refresh the skills you’ve already learned.\nIf you’re feeling particularly rusty, please use the second chapter of the course textbook to remind yourself of these basic Python operations.\n\n\nRecall that in Python, we can create variables, which are placeholders to which we assign some value. That value does not have to be numerical – there are many kinds of data types we could use. Python will automatically assign a type to your data when you enter it, but it helps to be able to check that it’s what you expect.\n\nExercise 3:\nLook through the first page of the syllabus and create variables to represent the following information. You may name the variables however you like, following Python’s naming conventions.\n\n\nCourse number (not including the department prefix), integer\n\n\nInstructor first name, string\n\n\nInstructor email, string\n\n\nLength of the class, floating point number\n\n\nDays of the week we meet, list of strings\n\n\nCourse prerequisites, list of strings\n\n\n\nYou can see how Python stores the variable type using the type() function. For example, if I define\nx = 10\nand then use type(), I should see\ntype(x)\n&gt; int\n\nExercise 4:\nNow use the Python type function to see how Python stored the variables you defined above. Do they match what you expect? If not, what do you need to change to make it right?\n\n\nIf you are only getting one output printed to the console, that’s because Jupyter only default prints the last operation you ask for. In order to force it to print everything, you need to wrap your instructions in the print() function.\n\n\n\n\n\nPython can store collections of information in a number of ways. The simplest way is a list. To make a list in Python, you use square brackets to enclose the list and separate the entries with commas.\n\nPython can make a list that contains multiple data types! This flexibility is useful but can be quite dangerous, especially when you try to automate things. Although we will be moving away from lists quickly, it’s important to know about this, and in general in this class, we will create “lists” that do not mix data types within one list or list-like object (more on that when we get to Pandas).\n\n\nExercise 5:\nTurn to page two of the syllabus and make a list of the learning objectives you will have completed by the end of the course. You may copy from the syllabus or you may write them in your own words.\n\n\n\n\nAnother way of organizing information in Python is to create a dictionary. Dictionaries store informaiton using keys and values – you can use the key to find the value you are looking for.\nFor example, if I wanted to make a dictionary for my family’s pets and who they belong to, I could do the following:\npets = {\"Aspen\": \"Casey\", \"Sox\":\"Alannah\", \"Autumn\": \"Michael\"}\nIn this case, the pet names (Aspen, Sox, and Autumn) are the keys, and their person is the value. If I typed in\npets[\"Sox\"]\nI would get the answer “Alannah”.\nYou can use any data type in here, and you can mix data types as well. There is a lot of flexiblity in creating dictionaries.\n\nExercise 6:\nLook at page 3 of the syllabus and create a dictionary for the course compenents and their grading, where the key is the assignment name and the value is the percentage of the grade (express this as a decimal, where 1. = 100%).\n\nYou can also make a nested dictionary and add more information. Let’s do this with the pets example first. If I wanted to add more information, like what kind of animal each pet was and how old they are, I can do this by making a key for each pet and then a dictionary as the value. That inner dictionary could then be the information I desired.\nFor example\npets_detailed = {\n    \"Aspen\": {\n        \"person\": \"Casey\",\n        \"age\": 7,\n        \"kind\": \"dog\"\n        },\n    \"Sox\": {\n        \"person\":\"Alannah\",\n        \"age\": 9,\n        \"kind\": \"cat\"\n        },\n   \"Autumn\": {\n       \"person\":\"Michael\",\n        \"age\": 9,\n        \"kind\": \"cat\"\n       }\n    }\nIn this case, the pet names are still the key, but if I choose that key, I get a whole dictionary. I can then select the keys from inside that dictionary. If I want to know whether Sox is a cat or a dog, I can do:\npets_detailed[\"Sox\"][\"kind\"]\nI would get the answer “cat”.\nIf I want to know who is Aspen’s person, I would say:\npets_detailed[\"Aspen\"][\"person\"]\nTo find the keys of a dictionary, you just use the dictionary name and .keys():\npets_detailed.keys()\nreturns\n['Aspen', 'Sox', 'Autumn']\nand\npets_detailed[\"Aspen\"].keys()\nreturns\n['person', 'age', 'kind']\n\nExercise 7:\nMake a new, nested dictionary, where the key is the assignment, and inside you have a dictionary that gives the due date, the percentage of the grade, and whether it’s graded S/U or on a numerical system. Note that you will need divide the final project into its components to do this.\n\n\n\n\nA central feature in programming is using the computer to do tedious and repetitive processes. We often do this by using loops – we will look at two kinds of loops in this lab: for loops and while loops.\n\n\nFor loops are given a set number of iterations up front. You can give the loop an existing list or array and ask it to loop over every element inside that list,\nbook_list[\"The Fifth Season\", \"A Wizard of Earthsea\", \"Jade City\", \"The Light Brigade\"]\nfor book in book_list:\n    print(book)\n\n&gt; \"The Fifth Season\"\n&gt; \"A Wizard of Earthsea\"\n&gt; \"Jade City\"\n&gt; \"The Light Brigade\"\nYou can do something similar with dictionaries:\nfor pet in pets_detailed:\n    print(pet+\" is \"+str(pets_detailed[pet]['age'])+\" years old\")\n\n&gt; Aspen is 7 years old\n&gt; Sox is 9 years old\n&gt; Autumn is 9 years old\nor you can just give it a numerical range in a number of ways:\nx_sum = 0\nfor x in range(0,10):\n    x_sum += x\nx_sum\n\n&gt; 45\nor\nx_sum = 0\nfor x in range(0,10,2):\n    x_sum += x\nx_sum\n\n&gt; 20\n\nIf you don’t understand what that last loop did, be sure to review your Python.\n\n\n\n\nWhile loops don’t have a built in range, so you have to be careful how you write them. You have to construct an end condition and then make sure that condition is reached.\nx_sum = 0\nwhile x_sum &gt; 0:\n    x_sum += 1\nThis won’t even run because the condition (x &gt; 0) immediately evaluates to false, and the loop only runs while that condition is true. However:\nx_sum = 1\nwhile x_sum &gt; 0:\n    x_sum += 1\nThis will run forever, because the condition will always be true.\nx_sum = 0\nwhile x_sum &lt; 10:\n    x_sum += 1\nThis will only run until x_sum reaches the value 10, and then it will stop.\n\nExercise 8:\nUse the list you made earlier of the course objectives, and write a program that loops over that list and prints each learning objective to the screen. Write this program two ways:\n\n\nusing a for loop\n\n\nusing a while loop (hint: use the len() function to find out how many objectives there are\n\n\n\n\n\n\nFunctions put together a number of operations and wrap them up in a neat package (so to speak). We will use functions often in this class, because they make it very easy to write flexible code that can be applied to a variety of data sets.\nIf you don’t remember how to write a function, definitely review your Python. Remember that a function must have a specific format. In its simplest form, this looks like\ndef function_name([optional input parameters]):\n    [code to execute]\n    return [value/variable etc]\nThe return statement is optional. Some functions just do things without returning any value. It’s up to you to decide what the best format is for a function you’re trying to write.\n\nExercise 9:\n\n\nwrite a function that takes as input a nested dictionary (like the one you created earlier for grades) prints the due date of that assignment\n\n\nwrite a function that takes as input a nested dictionary and one course component as a string and returns percent of the final grade that assignment is worth"
  },
  {
    "objectID": "SDS271/F23/Lab1_clean.html#a-note-on-the-labs",
    "href": "SDS271/F23/Lab1_clean.html#a-note-on-the-labs",
    "title": "Lab 1: Getting Started",
    "section": "",
    "text": "For the first half of the semester, we will focus on skill building through in-class labs. You may or may not be able to complete the lab during class time, it is your responsibility to complete the lab and respond to the self-reflection poll (linked at the end of each lab). These will constitute your “weekly homework” and must be turned in by the due date (usually the Wednesday of the following week).\nIn these labs, you will see information and instructions given in a few ways.\nOrdinary markdown: These traditional black-text-white-background sections are useful instructions, background, etc. You should read them to get context for what you will be doing.\n\nThese sections give you specific tips on how to do something that may be new or tricky.\nLook here first if you are stuck!\n\n\nThese sections give you instructions for what you are supposed to do in order to complete the lab. Consider these the “problem statements” to which you are expected to produce a solution.\n\nIf at any point you are confused about what you are supposed to do, please ask!"
  },
  {
    "objectID": "SDS271/F23/Lab1_clean.html#part-one-jupyterhub",
    "href": "SDS271/F23/Lab1_clean.html#part-one-jupyterhub",
    "title": "Lab 1: Getting Started",
    "section": "",
    "text": "If you’re reading this notebook in JupyterHub, then great! You’ve done it! If you’re reading this on the course website, then do the following:\nIn your browser, navigate to jupyterhub.smith.edu\nYou should see a page that looks like this:\n\nEveryone who was already registered for the class or who sent Casey an email before yesterday at 5PM stating their intention to add the class have been added to the list of people who have access to this server. You should be able to log in using your Smith credentials.\nusername: your Smith email address, without the @smith.edu password: the password you use to access your Smith email\nIf you have not registered for the class or emailed Casey before yesterday at 5PM, then you are not on that list. Please speak to Casey and she will ask CATS add you, but it may take a day or two before you get access.\n\nIf you are struggling to connect, please speak to Casey or submit a bug report here\n\n\nOnce you are able to open the Lab 1 notebook (.ipynb extension) in JupyterHub, please check in on  slido. You may proceed once you have done this.\n\n\n\n\nOnce you have access to JupyterHub, let’s get comfortable with using it. Similar to R Markdown (Quarto) that you used in SDS 100, JupyterHub allows you to write code in special code cells and annotate the code in markdown cells.\n\nTo create a new cell, press the “+” button in the menu along the top of the notebook.\nOnce you have a new cell, click on that cell to select it.\nYou can now choose “Code” or “Markdown” from the dropdown menu above.\nTo evaluate a code cell, use shift+enter.\n\n\nExercise 1:\n\n\nPerform a simple calculation with Python (it can be as easy as 1 + 1) in a cell.\n\n\nLeave a sentence or two in a markdown cell about what you did.\n\n\nThen enjoy some wholesome support from Coach Lasso in the form of a gif.\n\n\n\n\n\nSometimes, mistakes happen. Sometimes you write a while loop that has no termination condition and will run until the end of time if you let it. Sometimes you just realize after you ran a cell that you typed the wrong thing. Either way, you can always stop Jupyter in the middle of its processes.\n\nIn the menu at the top of the page, select Kernel &gt; Interrupt to stop the Kernel.\nOnce you’re ready to run the code again, you can re-run.\nYou can also restart the whole kernel and run the notebook from the start (this is often a good first debugging method if you’re not sure why something isn’t working). Kernel &gt; Restart Kernel and Run All Cells\n\nNow, let’s try to see how this works. Here’s a line of code:\nx = 0\nwhile x &lt; 10:\n    print(\"hello world!\")\nWhy do you expect this will be a problem if you try to run it? If you don’t know, talk to a neighbor.\n\nExercise 2:\nOnce you understand the problem, copy the code above into a new code cell and start running it.\nWhen it loops forever, you’ll want to interrupt it using Kernel &gt; Interrupt.\nThen fix the code and rerun it so it only prints “hello world” 10 times.\n\n\nAnother useful tip: click on the tab on the far left of the browser that looks like a square inside of a circle. That tab will show you what tabs you have open and what kernels are running. It’s good practice to shut down any kernels you are not actively using. If you don’t do this, you will overload the server and have a hard time running your notebooks. Periodically check this tab and clean up your processes."
  },
  {
    "objectID": "SDS271/F23/Lab1_clean.html#part-two-python-refresher-and-syllabus-activity",
    "href": "SDS271/F23/Lab1_clean.html#part-two-python-refresher-and-syllabus-activity",
    "title": "Lab 1: Getting Started",
    "section": "",
    "text": "One of the expectations of this class is that you have previous experience with Python. This is one of the reasons CSC 110 is a course prerequisite. It may have been a while since you’ve used Python, so let’s just refresh the skills you’ve already learned.\nIf you’re feeling particularly rusty, please use the second chapter of the course textbook to remind yourself of these basic Python operations.\n\n\nRecall that in Python, we can create variables, which are placeholders to which we assign some value. That value does not have to be numerical – there are many kinds of data types we could use. Python will automatically assign a type to your data when you enter it, but it helps to be able to check that it’s what you expect.\n\nExercise 3:\nLook through the first page of the syllabus and create variables to represent the following information. You may name the variables however you like, following Python’s naming conventions.\n\n\nCourse number (not including the department prefix), integer\n\n\nInstructor first name, string\n\n\nInstructor email, string\n\n\nLength of the class, floating point number\n\n\nDays of the week we meet, list of strings\n\n\nCourse prerequisites, list of strings\n\n\n\nYou can see how Python stores the variable type using the type() function. For example, if I define\nx = 10\nand then use type(), I should see\ntype(x)\n&gt; int\n\nExercise 4:\nNow use the Python type function to see how Python stored the variables you defined above. Do they match what you expect? If not, what do you need to change to make it right?\n\n\nIf you are only getting one output printed to the console, that’s because Jupyter only default prints the last operation you ask for. In order to force it to print everything, you need to wrap your instructions in the print() function."
  },
  {
    "objectID": "SDS271/F23/Lab1_clean.html#lists",
    "href": "SDS271/F23/Lab1_clean.html#lists",
    "title": "Lab 1: Getting Started",
    "section": "",
    "text": "Python can store collections of information in a number of ways. The simplest way is a list. To make a list in Python, you use square brackets to enclose the list and separate the entries with commas.\n\nPython can make a list that contains multiple data types! This flexibility is useful but can be quite dangerous, especially when you try to automate things. Although we will be moving away from lists quickly, it’s important to know about this, and in general in this class, we will create “lists” that do not mix data types within one list or list-like object (more on that when we get to Pandas).\n\n\nExercise 5:\nTurn to page two of the syllabus and make a list of the learning objectives you will have completed by the end of the course. You may copy from the syllabus or you may write them in your own words."
  },
  {
    "objectID": "SDS271/F23/Lab1_clean.html#dictionaries",
    "href": "SDS271/F23/Lab1_clean.html#dictionaries",
    "title": "Lab 1: Getting Started",
    "section": "",
    "text": "Another way of organizing information in Python is to create a dictionary. Dictionaries store informaiton using keys and values – you can use the key to find the value you are looking for.\nFor example, if I wanted to make a dictionary for my family’s pets and who they belong to, I could do the following:\npets = {\"Aspen\": \"Casey\", \"Sox\":\"Alannah\", \"Autumn\": \"Michael\"}\nIn this case, the pet names (Aspen, Sox, and Autumn) are the keys, and their person is the value. If I typed in\npets[\"Sox\"]\nI would get the answer “Alannah”.\nYou can use any data type in here, and you can mix data types as well. There is a lot of flexiblity in creating dictionaries.\n\nExercise 6:\nLook at page 3 of the syllabus and create a dictionary for the course compenents and their grading, where the key is the assignment name and the value is the percentage of the grade (express this as a decimal, where 1. = 100%).\n\nYou can also make a nested dictionary and add more information. Let’s do this with the pets example first. If I wanted to add more information, like what kind of animal each pet was and how old they are, I can do this by making a key for each pet and then a dictionary as the value. That inner dictionary could then be the information I desired.\nFor example\npets_detailed = {\n    \"Aspen\": {\n        \"person\": \"Casey\",\n        \"age\": 7,\n        \"kind\": \"dog\"\n        },\n    \"Sox\": {\n        \"person\":\"Alannah\",\n        \"age\": 9,\n        \"kind\": \"cat\"\n        },\n   \"Autumn\": {\n       \"person\":\"Michael\",\n        \"age\": 9,\n        \"kind\": \"cat\"\n       }\n    }\nIn this case, the pet names are still the key, but if I choose that key, I get a whole dictionary. I can then select the keys from inside that dictionary. If I want to know whether Sox is a cat or a dog, I can do:\npets_detailed[\"Sox\"][\"kind\"]\nI would get the answer “cat”.\nIf I want to know who is Aspen’s person, I would say:\npets_detailed[\"Aspen\"][\"person\"]\nTo find the keys of a dictionary, you just use the dictionary name and .keys():\npets_detailed.keys()\nreturns\n['Aspen', 'Sox', 'Autumn']\nand\npets_detailed[\"Aspen\"].keys()\nreturns\n['person', 'age', 'kind']\n\nExercise 7:\nMake a new, nested dictionary, where the key is the assignment, and inside you have a dictionary that gives the due date, the percentage of the grade, and whether it’s graded S/U or on a numerical system. Note that you will need divide the final project into its components to do this."
  },
  {
    "objectID": "SDS271/F23/Lab1_clean.html#loops-and-functions",
    "href": "SDS271/F23/Lab1_clean.html#loops-and-functions",
    "title": "Lab 1: Getting Started",
    "section": "",
    "text": "A central feature in programming is using the computer to do tedious and repetitive processes. We often do this by using loops – we will look at two kinds of loops in this lab: for loops and while loops.\n\n\nFor loops are given a set number of iterations up front. You can give the loop an existing list or array and ask it to loop over every element inside that list,\nbook_list[\"The Fifth Season\", \"A Wizard of Earthsea\", \"Jade City\", \"The Light Brigade\"]\nfor book in book_list:\n    print(book)\n\n&gt; \"The Fifth Season\"\n&gt; \"A Wizard of Earthsea\"\n&gt; \"Jade City\"\n&gt; \"The Light Brigade\"\nYou can do something similar with dictionaries:\nfor pet in pets_detailed:\n    print(pet+\" is \"+str(pets_detailed[pet]['age'])+\" years old\")\n\n&gt; Aspen is 7 years old\n&gt; Sox is 9 years old\n&gt; Autumn is 9 years old\nor you can just give it a numerical range in a number of ways:\nx_sum = 0\nfor x in range(0,10):\n    x_sum += x\nx_sum\n\n&gt; 45\nor\nx_sum = 0\nfor x in range(0,10,2):\n    x_sum += x\nx_sum\n\n&gt; 20\n\nIf you don’t understand what that last loop did, be sure to review your Python.\n\n\n\n\nWhile loops don’t have a built in range, so you have to be careful how you write them. You have to construct an end condition and then make sure that condition is reached.\nx_sum = 0\nwhile x_sum &gt; 0:\n    x_sum += 1\nThis won’t even run because the condition (x &gt; 0) immediately evaluates to false, and the loop only runs while that condition is true. However:\nx_sum = 1\nwhile x_sum &gt; 0:\n    x_sum += 1\nThis will run forever, because the condition will always be true.\nx_sum = 0\nwhile x_sum &lt; 10:\n    x_sum += 1\nThis will only run until x_sum reaches the value 10, and then it will stop.\n\nExercise 8:\nUse the list you made earlier of the course objectives, and write a program that loops over that list and prints each learning objective to the screen. Write this program two ways:\n\n\nusing a for loop\n\n\nusing a while loop (hint: use the len() function to find out how many objectives there are\n\n\n\n\n\n\nFunctions put together a number of operations and wrap them up in a neat package (so to speak). We will use functions often in this class, because they make it very easy to write flexible code that can be applied to a variety of data sets.\nIf you don’t remember how to write a function, definitely review your Python. Remember that a function must have a specific format. In its simplest form, this looks like\ndef function_name([optional input parameters]):\n    [code to execute]\n    return [value/variable etc]\nThe return statement is optional. Some functions just do things without returning any value. It’s up to you to decide what the best format is for a function you’re trying to write.\n\nExercise 9:\n\n\nwrite a function that takes as input a nested dictionary (like the one you created earlier for grades) prints the due date of that assignment\n\n\nwrite a function that takes as input a nested dictionary and one course component as a string and returns percent of the final grade that assignment is worth"
  },
  {
    "objectID": "SDS271/F23/sds-271-f23-homepage.html",
    "href": "SDS271/F23/sds-271-f23-homepage.html",
    "title": "SDS 271 Fall 2023",
    "section": "",
    "text": "Welcome to the Fall 2023 version of SDS 271: Advanced Programming for Data Science in Python!"
  },
  {
    "objectID": "sds-271-f23-homepage.html",
    "href": "sds-271-f23-homepage.html",
    "title": "SDS 271 Fall 2023",
    "section": "",
    "text": "Welcome to the Fall 2023 version of SDS 271: Advanced Programming for Data Science in Python!"
  },
  {
    "objectID": "sds-271-f23-homepage.html#syllabus-and-schedule",
    "href": "sds-271-f23-homepage.html#syllabus-and-schedule",
    "title": "SDS 271 Fall 2023",
    "section": "Syllabus and Schedule",
    "text": "Syllabus and Schedule\nThe course syllabus can be found here.\n\nThe course schedule can be found here. It will be updated regularly and is subject to change."
  },
  {
    "objectID": "sds-271-f23-homepage.html#accessing-compute-resources-and-reporting-issues",
    "href": "sds-271-f23-homepage.html#accessing-compute-resources-and-reporting-issues",
    "title": "SDS 271 Fall 2023",
    "section": "Accessing Compute Resources and Reporting Issues",
    "text": "Accessing Compute Resources and Reporting Issues\nYou can access the Smith JupyterHub server here. You will need to log in with your Smith credentials. If you are off-campus, you will have to log into a VPN to get access.\n\nInstructions on how to install the Pulse Secure VPN can be found [on the Smith website] (https://www.smith.edu/its/tara/networking/vpn.html). You need to log in to the VPN with your Smith credentials before accessing JupyterHub. Once you’ve signed in (and done the Duo push), you should be able to access the server as normal.\n\nIf you have a bug or connection issue to report, you can do so here."
  },
  {
    "objectID": "sds-271-f23-homepage.html#providing-feedback",
    "href": "sds-271-f23-homepage.html#providing-feedback",
    "title": "SDS 271 Fall 2023",
    "section": "Providing Feedback",
    "text": "Providing Feedback\nIf you have feedback for me that you are not comfortable sharing directly but would like me to take into acocunt, please don’t hesitate to leave it here. This form is entirely anonymous – the only information I ask for is the class that this is about."
  },
  {
    "objectID": "sds-271-f23-homepage.html#lab-1",
    "href": "sds-271-f23-homepage.html#lab-1",
    "title": "SDS 271 Fall 2023",
    "section": "Lab 1",
    "text": "Lab 1\nLab 1 is all about getting started with JupyterHub and reviewing your previous Python experience."
  }
]